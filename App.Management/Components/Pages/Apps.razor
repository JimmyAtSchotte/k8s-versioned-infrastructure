@page "/apps"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory _httpClientFactory
@inject ILogger<Apps> _logger
@rendermode InteractiveServer

<PageTitle>Apps</PageTitle>

<h1>Add app</h1>

<label>
    Name:
    <InputText TValue="string" @bind-Value="addApplicationCommand.Name" />
</label>

<label>
    Image:
    <InputSelect TValue="string" @bind-Value="addApplicationCommand.Image">
        <option value="">Select an image</option>
        @foreach (var tag in _webapplicationTags)
        {
        <option value="@tag">@tag</option>
        }
    </InputSelect>
</label>

<button class="btn btn-primary" @onclick="async () => await AddApplication()">Add app</button>

<h1>Apps</h1>
<table>
    <thead>
    <tr>
        <th>Name</th>
        <th>Image</th>
        <th>Change image</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var application in _applications)
    {
    <tr>
        <td><a href="http://k8s-app.local/@application.Name" target="_blank">@application.Name</a></td>
        <td>@application.Image</td>
        <td>
            <InputSelect TValue="string"
                         Value="@application.Image"
                         ValueChanged="@(args => ChangeTag(application, args))"
                         ValueExpression="() => application.Image">
                <option value="">Select an image</option>
                @foreach (var tag in _webapplicationTags)
                {
                <option value="@tag" selected="@(tag == application.Image)">@tag</option>
                }
            </InputSelect>
        </td>
        <td>
            <button @onclick="async () => await Delete(application)">Delete</button>
        </td>
    </tr>
    }
    </tbody>
</table>



@code {
    private List<Application> _applications = new List<Application>();
    private List<string> _webapplicationTags = new List<string>();
    private HttpClient _adminClient;
    private HttpClient _registryClient;
    

    private AddApplicationCommand addApplicationCommand = new AddApplicationCommand();
    
    protected override async Task OnInitializedAsync()
    {
        _adminClient = _httpClientFactory.CreateClient("ADMIN_API");
        _registryClient = _httpClientFactory.CreateClient("REGISTRY_API");

        await ListAvailableTags();
        await ListCustomers();
    }

    private async Task ListAvailableTags()
    {
        try
        {
            var response = await _registryClient.GetAsync("webapplication/tags/list");
            var content = await response.Content.ReadAsStringAsync();
            response.EnsureSuccessStatusCode();
            _webapplicationTags = JsonSerializer.Deserialize<DockerImageResponse>(content).Tags.ToList();
        }
        catch (Exception e)
        {
            _logger.LogError(e, e.Message);
        }
        
    }

    private async Task ListCustomers()
    {
        try
        {
            var response = await _adminClient.GetAsync("applications");
            var content = await response.Content.ReadAsStringAsync();
            response.EnsureSuccessStatusCode();
            _applications = JsonSerializer.Deserialize<List<Application>>(content);
        }
        catch (Exception e)
        {
            _logger.LogError(e, e.Message);
        }
        
    }

    private class Application
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }
        [JsonPropertyName("image")]
        public string Image { get; set; }
    }
    
    private class AddApplicationCommand
    {
        public string Name { get; set; }
        public string Image { get; set; }
    }
    
    private class UpdateApplicationImageCommand
    {
        public string Image { get; set; }
    }

    private async Task AddApplication()
    {
        try { 
            var response = await _adminClient.PostAsync("applications", new StringContent(JsonSerializer.Serialize(addApplicationCommand), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();

            var app = JsonSerializer.Deserialize<Application>(await response.Content.ReadAsStringAsync());
            _applications.Add(app);

            addApplicationCommand = new AddApplicationCommand();
        }
        catch (Exception e)
        {    
            _logger.LogError(e, e.Message);
        }
     
    }  
    
    public class DockerImageResponse
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }
        
        [JsonPropertyName("tags")]
        public string[] Tags { get; set; }
    }


    private async Task ChangeTag(Application application, string image)
    {
        try
        {
            application.Image = image;
        
            var command = new UpdateApplicationImageCommand()
            {
                Image = application.Image
            };
        
            var response = await _adminClient.PostAsync($"applications/{application.Name}", new StringContent(JsonSerializer.Serialize(command), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
        }
        catch (Exception e)
        {
            _logger.LogError(e, e.Message);
        }
    }

    private async Task Delete(Application application)
    {
        try { 
            var response = await _adminClient.DeleteAsync($"applications/{application.Name}");
            response.EnsureSuccessStatusCode();

            var app = _applications.First(x => x.Name == application.Name);
            _applications.Remove(app);
        }
        catch (Exception e)
        {
            _logger.LogError(e, e.Message);
        }
    }


}


